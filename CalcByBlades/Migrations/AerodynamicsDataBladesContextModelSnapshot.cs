// <auto-generated />
using System;
using BladesCalc.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BladesCalc.Migrations
{
    [DbContext(typeof(AerodynamicsDataBladesContext))]
    partial class AerodynamicsDataBladesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BladesCalc.Models.AerodynamicsDataBlades", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<double>("BladeLength")
                        .HasColumnType("float")
                        .HasColumnName("BladeLength");

                    b.Property<double>("BladeWidth")
                        .HasColumnType("float")
                        .HasColumnName("BladeWidth");

                    b.Property<double>("Efficiency1")
                        .HasColumnType("float")
                        .HasColumnName("Efficiency1");

                    b.Property<double>("Efficiency2")
                        .HasColumnType("float")
                        .HasColumnName("Efficiency2");

                    b.Property<double>("Efficiency3")
                        .HasColumnType("float")
                        .HasColumnName("Efficiency3");

                    b.Property<double>("Efficiency4")
                        .HasColumnType("float")
                        .HasColumnName("Efficiency4");

                    b.Property<double>("ImpellerInletDiameter")
                        .HasColumnType("float")
                        .HasColumnName("ImpellerInletDiameter");

                    b.Property<double>("ImpellerWidth")
                        .HasColumnType("float")
                        .HasColumnName("ImpellerWidth");

                    b.Property<double>("MaxDeltaEfficiency")
                        .HasColumnType("float")
                        .HasColumnName("MaxDeltaEfficiency");

                    b.Property<double>("MinDeltaEfficiency")
                        .HasColumnType("float")
                        .HasColumnName("MinDeltaEfficiency");

                    b.Property<string>("NewMarkOfFan")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NewMarkOfFan");

                    b.Property<string>("NewMarkOfFand")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NewMarkOfFand");

                    b.Property<int>("NumberOfBlades")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfBlades");

                    b.Property<double>("OutletLength")
                        .HasColumnType("float")
                        .HasColumnName("OutletLength");

                    b.Property<double>("OutletWidth")
                        .HasColumnType("float")
                        .HasColumnName("OutletWidth");

                    b.Property<string>("Scheme")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Scheme");

                    b.Property<double>("StaticPressure1")
                        .HasColumnType("float")
                        .HasColumnName("StaticPressure1");

                    b.Property<double>("StaticPressure2")
                        .HasColumnType("float")
                        .HasColumnName("StaticPressure2");

                    b.Property<double>("StaticPressure3")
                        .HasColumnType("float")
                        .HasColumnName("StaticPressure3");

                    b.Property<string>("TypeOfBlades")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("TypeOfBlades");

                    b.Property<string>("TypeOfBladesKod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("TypeOfBladesKod");

                    b.HasKey("Id")
                        .HasName("PK_AerodynamicsDataBlades");

                    b.HasIndex(new[] { "TypeOfBlades" }, "IX_AerodynamicsDataBlades_TypeOfBlades");

                    b.HasIndex(new[] { "TypeOfBladesKod" }, "IX_AerodynamicsDataBlades_TypeOfBladesKod");

                    b.ToTable("AerodynamicsDataBlades");
                });
#pragma warning restore 612, 618
        }
    }
}
